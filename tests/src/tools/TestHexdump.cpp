// SPDX-License-Identifier: LGPL-3.0-only
// Copyright 2015-2022 Thomas Schaetzlein <thomas@pnxs.de>, Christopher Gerlach <gerlachch@gmx.com>
#include <dots/testing/gtest/gtest.h>
#include <dots/fmt/hexdump.h>

struct TestHexdump : ::testing::Test
{
protected:

    TestHexdump()
    {
        /* do nothing */
    }

};

TEST_F(TestHexdump, hexdump_uint8)
{
    std::vector<uint8_t> data = {
        0x54, 0x68, 0x65, 0x20, 0x7b, 0x66, 0x6d, 0x74, 0x7d, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
        0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
        0x74, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x73,
        0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x43, 0x2b, 0x2b, 0x20, 0x74, 0x79, 0x70, 0x65,
        0x73, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x66, 0x6d, 0x74, 0x2f, 0x72, 0x61, 0x6e, 0x67, 0x65,
        0x73, 0x2e, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x61,
        0x6e, 0x64, 0x00, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
        0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x63, 0x6f, 0x6e,
        0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20,
        0x73, 0x74, 0x64, 0x3a, 0x3a, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2c, 0x20, 0x66, 0x6d, 0x74,
        0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x2e, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x61,
        0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d,
        0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x6d, 0x74, 0x2f, 0x73,
        0x74, 0x64, 0x2e, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73,
        0x74, 0x61, 0x6e, 0x64, 0x02, 0x72, 0x64, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20,
        0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x0a
    };

    auto hexdump = fmt::format("{}", fmt::extension::format_hexdump(std::span(data)));

    std::string expectedData = {
        "0000: 54 68 65 20 7b 66 6d 74 7d 20 6c 69 62 72 61 72  The {fmt} librar\n"
        "0010: 79 20 70 72 6f 76 69 64 65 73 20 66 6f 72 6d 61  y provides forma\n"
        "0020: 74 74 65 72 73 20 66 6f 72 20 6d 61 6e 79 20 73  tters for many s\n"
        "0030: 74 61 6e 64 61 72 64 20 43 2b 2b 20 74 79 70 65  tandard C++ type\n"
        "0040: 73 2e 20 53 65 65 20 66 6d 74 2f 72 61 6e 67 65  s. See fmt/range\n"
        "0050: 73 2e 68 20 66 6f 72 20 72 61 6e 67 65 73 20 61  s.h for ranges a\n"
        "0060: 6e 64 00 74 75 70 6c 65 73 20 69 6e 63 6c 75 64  nd.tuples includ\n"
        "0070: 69 6e 67 20 73 74 61 6e 64 61 72 64 20 63 6f 6e  ing standard con\n"
        "0080: 74 61 69 6e 65 72 73 20 73 75 63 68 20 61 73 20  tainers such as \n"
        "0090: 73 74 64 3a 3a 76 65 63 74 6f 72 2c 20 66 6d 74  std::vector, fmt\n"
        "00a0: 2f 63 68 72 6f 6e 6f 2e 68 20 66 6f 72 20 64 61  /chrono.h for da\n"
        "00b0: 74 65 20 61 6e 64 20 74 69 6d 65 20 66 6f 72 6d  te and time form\n"
        "00c0: 61 74 74 69 6e 67 20 61 6e 64 20 66 6d 74 2f 73  atting and fmt/s\n"
        "00d0: 74 64 2e 68 20 66 6f 72 20 6f 74 68 65 72 20 73  td.h for other s\n"
        "00e0: 74 61 6e 64 02 72 64 20 6c 69 62 72 61 72 79 20  tand.rd library \n"
        "00f0: 74 79 70 65 73 2e 0a                             types.."
    };

    EXPECT_EQ(hexdump, expectedData);
}


TEST_F(TestHexdump, hexdump_char)
{
    std::vector<char> data = {
        0x54, 0x68, 0x65, 0x20, 0x7b, 0x66, 0x6d, 0x74, 0x7d, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
    };

    auto hexdump = fmt::format("{}", fmt::extension::format_hexdump(std::span(data)));

    std::string expectedData = {
        "0000: 54 68 65 20 7b 66 6d 74 7d 20 6c 69 62 72 61 72  The {fmt} librar"
    };

    EXPECT_EQ(hexdump, expectedData);
}

TEST_F(TestHexdump, hexdump_uchar)
{
    std::vector<unsigned char> data = {
        0x54, 0x68, 0x65, 0x20, 0x7b, 0x66, 0x6d, 0x74, 0x7d, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
    };

    auto hexdump = fmt::format("{}", fmt::extension::format_hexdump(std::span(data)));

    std::string expectedData = {
        "0000: 54 68 65 20 7b 66 6d 74 7d 20 6c 69 62 72 61 72  The {fmt} librar"
    };

    EXPECT_EQ(hexdump, expectedData);
}

TEST_F(TestHexdump, hexdump_int8)
{
    std::vector<int8_t> data = {
        0x54, 0x68, 0x65, 0x20, 0x7b, 0x66, 0x6d, 0x74, 0x7d, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
    };

    auto hexdump = fmt::format("{}", fmt::extension::format_hexdump(std::span(data)));

    std::string expectedData = {
        "0000: 54 68 65 20 7b 66 6d 74 7d 20 6c 69 62 72 61 72  The {fmt} librar"
    };

    EXPECT_EQ(hexdump, expectedData);
}

TEST_F(TestHexdump, hexdump_value)
{
    std::vector<int8_t> data = {
        0x54, 0x68, 0x65, 0x20, 0x7b, 0x66, 0x6d, 0x74, 0x7d, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
    };

    auto v = fmt::extension::format_hexdump(std::span(data));
    auto hexdump = fmt::format("{}", v);

    std::string expectedData = {
        "0000: 54 68 65 20 7b 66 6d 74 7d 20 6c 69 62 72 61 72  The {fmt} librar"
    };

    EXPECT_EQ(hexdump, expectedData);
}